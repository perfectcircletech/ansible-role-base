---
- name: Maintain base packages
  when: true
  tags:
    - base-packages
  block:
    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'

    - name: Download ASCII-armored GPG keys
      ansible.builtin.get_url:
        url: "{{ k.key }}"
        dest: "/usr/share/keyrings/{{ k.name }}.asc"
        mode: '0644'
      loop: "{{ base_apt_repos }}"
      loop_control:
        loop_var: k
      check_mode: false
      when: ansible_pkg_mgr == 'apt'
      register: _keys_dl
      until: _keys_dl is success
      retries: 5
      delay: 2

    - name: Stat dearmored key
      ansible.builtin.stat:
        path: "/usr/share/keyrings/{{ k.name }}.gpg"
      loop: "{{ base_apt_repos }}"
      loop_control:
        loop_var: k
      register: _keys_gpg_stat

    - name: Dearmor GPG key only when needed
      ansible.builtin.shell: |
        set -e
        TMP="/usr/share/keyrings/{{ k.name }}.gpg.tmp"
        gpg --dearmor --yes -o "$TMP" "/usr/share/keyrings/{{ k.name }}.asc"
        if ! cmp -s "$TMP" "/usr/share/keyrings/{{ k.name }}.gpg"; then
          mv "$TMP" "/usr/share/keyrings/{{ k.name }}.gpg"
          echo changed
        else
          rm -f "$TMP"
        fi
      args:
        executable: /bin/bash
      loop: "{{ base_apt_repos }}"
      loop_control:
        loop_var: k
        index_var: idx
      register: _dearmor
      changed_when: "'changed' in _dearmor.stdout"
      when:
        - ansible_pkg_mgr == 'apt'
        - _keys_dl.results[idx].changed | default(false)
          or not _keys_gpg_stat.results[idx].stat.exists

    - name: Add apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/{{ k.name }}.gpg] {{ k.repo }}"
        filename: "{{ k.name }}"
        state: present
      loop: "{{ base_apt_repos }}"
      loop_control:
        loop_var: k
      check_mode: false
      when: ansible_pkg_mgr == 'apt'

    - name: Install default base packages
      ansible.builtin.apt:
        pkg: "{{ base_default_packages }}"
        update_cache: true
      when: ansible_pkg_mgr == 'apt'
      register: _install_default_base_packages
      until: _install_default_base_packages is success
      retries: 5
      delay: 2

    - name: Install additional base packages
      ansible.builtin.apt:
        pkg: "{{ base_packages }}"
      when: ansible_pkg_mgr == 'apt'
      register: _install_base_packages
      until: _install_base_packages is success
      retries: 5
      delay: 2

    - name: Remove default forbidden packages
      ansible.builtin.apt:
        pkg: "{{ base_deny_default_packages }}"
        purge: true
        state: absent
        autoremove: true
      when: ansible_pkg_mgr == 'apt'
      register: _remove_deny_default_packages
      until: _remove_deny_default_packages is success
      retries: 5
      delay: 2

    - name: Remove additional forbidden packages
      ansible.builtin.apt:
        pkg: "{{ base_deny_packages }}"
        purge: true
        state: absent
        autoremove: true
      when: ansible_pkg_mgr == 'apt'
      register: _remove_deny_packages
      until: _remove_deny_packages is success
      retries: 5
      delay: 2
